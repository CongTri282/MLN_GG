import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import type { GameState } from '../../types/game';
import './Result.css';

const Result: React.FC = () => {
  const navigate = useNavigate();
  const [gameResult, setGameResult] = useState<GameState | null>(null);
  const [resultType, setResultType] = useState<'economy' | 'environment' | 'balanced' | 'pure-economy' | 'pure-environment'>('balanced');

  useEffect(() => {
    // Get game result from localStorage
    const savedResult = localStorage.getItem('gameResult');
    if (savedResult) {
      const result: GameState = JSON.parse(savedResult);
      setGameResult(result);
      
      // Determine result type based on choices
      const { economy, environment } = result.totalScore;
      const choices = result.choices;
      
      // Check for pure choices (all economy or all environment)
      const economyChoices = ["coal_power_plant", "approve_industrial_zone", "expand_highways"];
      const environmentChoices = ["solar_wind_farm", "eco_friendly_development", "public_transport_system"];
      
      const isAllEconomy = choices.every(choice => economyChoices.includes(choice));
      const isAllEnvironment = choices.every(choice => environmentChoices.includes(choice));
      
      if (isAllEconomy) {
        setResultType('pure-economy');
      } else if (isAllEnvironment) {
        setResultType('pure-environment');
      } else if (economy > environment + 20) {
        setResultType('economy');
      } else if (environment > economy + 20) {
        setResultType('environment');
      } else {
        setResultType('balanced');
      }
    } else {
      // No game result found, redirect to home
      navigate('/');
    }
  }, [navigate]);

  const handlePlayAgain = () => {
    localStorage.removeItem('gameResult');
    navigate('/');
  };

  const handleBackToHome = () => {
    localStorage.removeItem('gameResult');
    navigate('/');
  };

  const getResultMessage = () => {
    if (!gameResult) return null;
    
    // const { economy, environment } = gameResult.totalScore;
    
    switch (resultType) {
      case 'pure-economy':
        return {
          title: "Nh√† T∆∞ B·∫£n Thu·∫ßn T√∫y",
          description: `B·∫°n ƒë√£ ch·ªçn t·∫•t c·∫£ c√°c l·ª±a ch·ªçn thi√™n v·ªÅ kinh t·∫ø! B·∫°n th·ªÉ hi·ªán t∆∞ duy t·∫≠p trung ho√†n to√†n v√†o tƒÉng tr∆∞·ªüng, 
            l·ª£i nhu·∫≠n v√† ph√°t tri·ªÉn kinh t·∫ø m√† kh√¥ng quan t√¢m ƒë·∫øn t√°c ƒë·ªông m√¥i tr∆∞·ªùng.`,
          icon: "üí∏",
          color: "pure-economy",
          philosophy: `ƒê√¢y l√† bi·ªÉu hi·ªán c·ªßa m√¢u thu·∫´n tuy·ªát ƒë·ªëi - khi ch·ªâ t·∫≠p trung v√†o m·ªôt m·∫∑t c·ªßa s·ª± v·∫≠t m√† b·ªè qua ho√†n to√†n m·∫∑t ƒë·ªëi l·∫≠p. 
            Theo quy lu·∫≠t m√¢u thu·∫´n, s·ª± ph√°t tri·ªÉn m·ªôt chi·ªÅu n√†y s·∫Ω d·∫´n ƒë·∫øn kh·ªßng ho·∫£ng v√† bu·ªôc ph·∫£i t√¨m ki·∫øm s·ª± c√¢n b·∫±ng.`
        };
      case 'pure-environment':
        return {
          title: "Nh√† Sinh Th√°i C·ª±c ƒêoan",
          description: `B·∫°n ƒë√£ ch·ªçn t·∫•t c·∫£ c√°c l·ª±a ch·ªçn thi√™n v·ªÅ m√¥i tr∆∞·ªùng! B·∫°n th·ªÉ hi·ªán cam k·∫øt tuy·ªát ƒë·ªëi v·ªõi vi·ªác b·∫£o v·ªá thi√™n nhi√™n 
            v√† s·∫µn s√†ng hy sinh m·ªçi c∆° h·ªôi kinh t·∫ø ƒë·ªÉ gi·ªØ g√¨n m√¥i tr∆∞·ªùng.`,
          icon: "üåç",
          color: "pure-environment",
          philosophy: `ƒê√¢y c≈©ng l√† bi·ªÉu hi·ªán c·ªßa m√¢u thu·∫´n tuy·ªát ƒë·ªëi nh∆∞ng theo h∆∞·ªõng ng∆∞·ª£c l·∫°i. M·∫∑c d√π ƒë·ªông c∆° t·ªët ƒë·∫πp, 
            nh∆∞ng vi·ªác b·ªè qua ho√†n to√†n nhu c·∫ßu ph√°t tri·ªÉn kinh t·∫ø c≈©ng c√≥ th·ªÉ d·∫´n ƒë·∫øn nh·ªØng h·ªá qu·∫£ kh√¥ng mong mu·ªën.`
        };
      case 'economy':
        return {
          title: "Nh√† Ph√°t tri·ªÉn Kinh t·∫ø",
          description: `B·∫°n ƒë√£ th·ªÉ hi·ªán xu h∆∞·ªõng ∆∞u ti√™n ph√°t tri·ªÉn kinh t·∫ø trong c√°c quy·∫øt ƒë·ªãnh. 
            ƒêi·ªÅu n√†y c√≥ th·ªÉ mang l·∫°i th·ªãnh v∆∞·ª£ng ng·∫Øn h·∫°n nh∆∞ng c·∫ßn c√¢n nh·∫Øc t√°c ƒë·ªông m√¥i tr∆∞·ªùng l√¢u d√†i.`,
          icon: "üí∞",
          color: "economy",
          philosophy: `Theo quy lu·∫≠t m√¢u thu·∫´n, s·ª± ph√°t tri·ªÉn kinh t·∫ø v√† b·∫£o v·ªá m√¥i tr∆∞·ªùng t·ªìn t·∫°i nh∆∞ hai m·∫∑t ƒë·ªëi l·∫≠p 
            nh∆∞ng th·ªëng nh·∫•t. Vi·ªác thi√™n v·ªÅ m·ªôt b√™n qu√° m·ª©c s·∫Ω t·∫°o ra m√¢u thu·∫´n c·∫ßn ƒë∆∞·ª£c gi·∫£i quy·∫øt ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c s·ª± h√†i h√≤a.`
        };
      case 'environment':
        return {
          title: "Nh√† B·∫£o v·ªá M√¥i tr∆∞·ªùng",
          description: `B·∫°n ƒë√£ th·ªÉ hi·ªán cam k·∫øt m·∫°nh m·∫Ω v·ªõi vi·ªác b·∫£o v·ªá m√¥i tr∆∞·ªùng. 
            ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o s·ª± b·ªÅn v·ªØng l√¢u d√†i nh∆∞ng c√≥ th·ªÉ c·∫ßn c√¢n b·∫±ng v·ªõi nhu c·∫ßu ph√°t tri·ªÉn kinh t·∫ø.`,
          icon: "üå±",
          color: "environment",
          philosophy: `Quy lu·∫≠t m√¢u thu·∫´n cho th·∫•y r·∫±ng m√¥i tr∆∞·ªùng v√† kinh t·∫ø kh√¥ng ph·∫£i l√† hai th·ª±c th·ªÉ ho√†n to√†n t√°ch bi·ªát. 
            S·ª± b·∫£o v·ªá m√¥i tr∆∞·ªùng c≈©ng c√≥ th·ªÉ t·∫°o ra c∆° h·ªôi kinh t·∫ø m·ªõi th√¥ng qua c√°c m√¥ h√¨nh ph√°t tri·ªÉn b·ªÅn v·ªØng.`
        };
      case 'balanced':
        return {
          title: "Nh√† C√¢n b·∫±ng B·ªÅn v·ªØng",
          description: `B·∫°n ƒë√£ th·ªÉ hi·ªán kh·∫£ nƒÉng c√¢n b·∫±ng gi·ªØa ph√°t tri·ªÉn kinh t·∫ø v√† b·∫£o v·ªá m√¥i tr∆∞·ªùng. 
            ƒê√¢y l√† c√°ch ti·∫øp c·∫≠n to√†n di·ªán, t√¨m ki·∫øm s·ª± h√†i h√≤a gi·ªØa c√°c l·ª±c ƒë·ªëi l·∫≠p.`,
          icon: "‚öñÔ∏è",
          color: "balanced",
          philosophy: `B·∫°n ƒë√£ th·ª±c h√†nh ƒë√∫ng tinh th·∫ßn c·ªßa quy lu·∫≠t m√¢u thu·∫´n - nh·∫≠n ra r·∫±ng c√°c ƒë·ªëi l·∫≠p c√≥ th·ªÉ t·ªìn t·∫°i 
            v√† ph√°t tri·ªÉn trong th·ªëng nh·∫•t. S·ª± c√¢n b·∫±ng n√†y l√† ch√¨a kh√≥a cho ph√°t tri·ªÉn b·ªÅn v·ªØng.`
        };
      default:
        return {
          title: "Ng∆∞·ªùi ch∆°i",
          description: "C·∫£m ∆°n b·∫°n ƒë√£ tham gia tr√≤ ch∆°i!",
          icon: "üéÆ",
          color: "balanced",
          philosophy: ""
        };
    }
  };

  if (!gameResult) {
    return (
      <div className="result-loading">
        <div className="loading-spinner"></div>
        <p>ƒêang t·∫£i k·∫øt qu·∫£...</p>
      </div>
    );
  }

  const resultMessage = getResultMessage();
  const { economy, environment } = gameResult.totalScore;

  if (!resultMessage) {
    return (
      <div className="result-loading">
        <div className="loading-spinner"></div>
        <p>ƒêang t·∫£i k·∫øt qu·∫£...</p>
      </div>
    );
  }

  return (
    <div className={`result-container ${resultMessage.color}`}>
      {/* Result Header */}
      <header className="result-header">
        <div className="result-icon">
          {resultMessage.icon}
        </div>
        <h1 className="result-title">{resultMessage.title}</h1>
        <p className="result-subtitle">K·∫øt qu·∫£ cu·ªëi tr√≤ ch∆°i</p>
      </header>

      {/* Score Summary */}
      <section className="score-summary">
        <h2>T·ªïng ƒëi·ªÉm c·ªßa b·∫°n</h2>
        <div className="final-scores">
          <div className="final-score economy">
            <div className="score-icon">üí∞</div>
            <div className="score-details">
              <span className="score-label">Kinh t·∫ø</span>
              <span className="score-value">{economy}</span>
            </div>
          </div>
          <div className="score-divider">VS</div>
          <div className="final-score environment">
            <div className="score-icon">üå±</div>
            <div className="score-details">
              <span className="score-label">M√¥i tr∆∞·ªùng</span>
              <span className="score-value">{environment}</span>
            </div>
          </div>
        </div>
        
        {/* Score Visualization */}
        <div className="score-visualization">
          <div className="score-bar">
            <div 
              className="economy-bar"
              style={{ 
                width: `${Math.abs(economy) / (Math.abs(economy) + Math.abs(environment)) * 100 || 50}%`
              }}
            >
              <span>Kinh t·∫ø</span>
            </div>
            <div 
              className="environment-bar"
              style={{ 
                width: `${Math.abs(environment) / (Math.abs(economy) + Math.abs(environment)) * 100 || 50}%`
              }}
            >
              <span>M√¥i tr∆∞·ªùng</span>
            </div>
          </div>
        </div>
      </section>

      {/* Result Analysis */}
      <section className="result-analysis">
        <h2>Ph√¢n t√≠ch k·∫øt qu·∫£</h2>
        <div className="analysis-content">
          <p className="result-description">{resultMessage.description}</p>
          
          <div className="philosophy-section">
            <h3>Tri·∫øt l√Ω Quy lu·∫≠t M√¢u thu·∫´n</h3>
            <p className="philosophy-text">{resultMessage.philosophy}</p>
          </div>
        </div>
      </section>

      {/* Choice History */}
      <section className="choice-history">
        <h2>L·ªãch s·ª≠ l·ª±a ch·ªçn</h2>
        <div className="choices-made">
          <p>B·∫°n ƒë√£ ho√†n th√†nh <strong>{gameResult.choices.length}</strong> t√¨nh hu·ªëng</p>
          <div className="choice-stats">
            <div className="stat-item">
              <span className="stat-label">T·ªïng quy·∫øt ƒë·ªãnh:</span>
              <span className="stat-value">{gameResult.choices.length}</span>
            </div>
          </div>
        </div>
      </section>

      {/* Action Buttons */}
      <div className="result-actions">
        <button className="play-again-btn" onClick={handlePlayAgain}>
          üîÑ Ch∆°i l·∫°i
        </button>
        <button className="home-btn" onClick={handleBackToHome}>
          üè† V·ªÅ trang ch·ªß
        </button>
      </div>

      {/* Footer */}
      <footer className="result-footer">
        <p>C·∫£m ∆°n b·∫°n ƒë√£ kh√°m ph√° quy lu·∫≠t m√¢u thu·∫´n th√¥ng qua tr√≤ ch∆°i!</p>
        <p>D·ª± √°n m√¥n Tri·∫øt h·ªçc - MLN111</p>
      </footer>
    </div>
  );
};

export default Result;